<?php

namespace Tests\Unit;

use App\Services\UserService;
use App\User;
use Illuminate\Auth\Notifications\ResetPassword;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Notification;
use Tests\TestCase;

class UserServiceTest extends TestCase
{
    use RefreshDatabase;
    use WithFaker;

    private $service;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->service = new UserService();
    }

    public function testActiveAgent()
    {
        $user = factory(User::class)->create(['active' => false]);
        $ret_user = $this->service->active($user);

        $this->assertTrue($ret_user->active);
    }

    public function testDesactiveAgent()
    {
        $user = factory(User::class)->create();
        $ret_user = $this->service->desactive($user);

        $this->assertFalse($ret_user->active);
    }

    public function testSetPermission()
    {
        $user = factory(User::class)->create();
        $ret_user = $this->service->setPermission($user, 'superadmin');

        $this->assertEquals('superadmin', $ret_user->permissions);
    }

    public function testGetUsers()
    {
        factory(User::class, 30)->create();
        factory(User::class, 5)->create(['active' => false]);

        $active_users = $this->service->getUsers();
        $this->assertCount(30, $active_users);

        $all_users = $this->service->getUsers(true);
        $this->assertCount(35, $all_users);

    }

    public function testCreateUser()
    {
        $name = $this->faker->name;
        $email = $this->faker->email;

        $user = $this->service->create($email, $name);
        $this->assertEquals($name, $user->name);
    }

    public function testUpdateEmail()
    {
        $email = $this->faker->email;

        $user = factory(User::class)->create();

        $upd_user = $this->service->update($user, null,  $email);
        $this->assertEquals($email, $upd_user->email);
    }

    public function testUpdateName()
    {
        $name = $this->faker->name;

        $user = factory(User::class)->create();

        $upd_user = $this->service->update($user, $name);
        $this->assertEquals($name, $upd_user->name);
    }

    public function testResetPassword()
    {
        Notification::fake();

        $user = factory(User::class)->create();

        $this->service->resetPassword($user);

        Notification::assertSentTo(
            [$user], ResetPassword::class
        );
    }
}
